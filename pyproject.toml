[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "Jaxley"
version = "0.11.2"
description = "Differentiable neuron simulations."
authors = [
    { name = "jaxleyverse", email = "jaxleyverse@gmail.com"},
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Adaptive Technologies",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    """License :: OSI Approved :: Apache Software License""",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Development Status :: 3 - Alpha",
]
requires-python = ">=3.10"
readme = "README.md"
keywords = ["neuroscience", "biophysics", "simulator", "jax"]
dependencies = [
    # See #571 for the pin on the JAX version. Jaxley runs with newer versions of JAX
    # but is much slower on CPU. Newer versions can be made equally fast by setting
    # `os.environ['XLA_FLAGS'] = '--xla_cpu_use_thunk_runtime=false'` at the beginning
    # of a jupyter notebook.
    "jax",
    "matplotlib",
    "numpy",
    "pandas>=2.2.0",
    "tridiax",
    "networkx",
]

[project.optional-dependencies]
doc = [
    "jupyter_contrib_nbextensions",
    "notebook <= 6.4.12",
    "traitlets <= 5.9.0",
    "ipython <= 8.9.0",
    "mkdocs",
    "mkdocs-material",
    "markdown-include",
    "mkdocs-redirects",
    "mkdocstrings[python]>=0.18",
    "mike",
    "sphinx",
    "sphinx-autobuild",
    "sphinx_autodoc_typehints",
    "sphinx-math-dollar",
    "sphinx-design",
    "myst-nb",
    "jupytext",
    "optax",
    "sphinx-book-theme",
]
dev = [
    "jaxley-mech",
    # "neuron",
    "pytest",
    "pyright",
    "optax",
    "jupyter",
]
lint = [
    "ruff",
    "mypy[faster-cache]",
    "typos",
]

[tool.pytest.ini_options]
addopts = [
  "--tb=short",
  "--strict-config",
  "--strict-markers",
  "--import-mode=importlib",
  # Default to running fast tests only. To run ALL tests, run: pytest -m ""
  "-m not slow and not regression and not additional_neuron_tests",
]
filterwarnings = [
  # Fail on warnings
  # "error",
]
xfail_strict = true
markers = [
    "slow: marks tests as slow (T > 10s)",
    "regression: marks regression tests",
    "additional_neuron_tests: tests marked as such will not be run by default",
]

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
include = ["*"]  # package names should match these glob patterns (["*"] by default)
exclude = []  # exclude packages matching these glob patterns (empty by default)

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
  "ANN", # flake8-annotations
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C901", # complex-structure
  "D", # flake8-docstrings
  "DTZ", # flake8-datetimez
  "E", # pycodestyle
  "EM", # flake8-errmsg
  "F", # pyflakes
  "FURB", # refurb
  "FA", # flake8-future-annotations
  "FBT", # flake8-boolean-trap
  "FLY002", # static-join-to-f-string
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "NPY", # NumPy rules
  "PERF", # perflint
  "PD", # pandas-vet
  "PIE", # flake8-pie
  # "PL", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RUF", # ruff-specific rules
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # pycodestyle
]
ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  # # ------------------------------------------------------------------
  # "ANN401", # Dynamically typed expressions (Any) are disallowed
  # "D401", # Relax NumPy docstring convention: first line should be imperative
  # "E501", # Line length regulated by formatter
  "FBT003", # Boolean positional arguments in function calls
  "PLR2004", # magic-value-comparison
  "PT011", # pytest.raises is too broad, set match or use a more specific exception
  # "RUF022", # `__all__` is not sorted
  # "RUF005", # Consider expression instead of concatenation
  # "SIM102", # Use a single `if` statement instead of nested `if` statements
  # "SIM108", # Use ternary operator
  # "SIM114", # Combine `if` branches
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  # "TRY003", # Avoid specifying long messages outside the exception class
]
exclude = ["*.ipynb"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.mypy]
files = ["jaxley", "tests"]
strict = true
enable_error_code = [
  "redundant-expr",
  "truthy-bool",
  "ignore-without-code",
]
disable_error_code = [
  "empty-body",
]

[[tool.mypy.overrides]]
module = [
  "IPython.*",
  "jax.*",
  "matplotlib.*",
  "torch.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
  "IPython.*",
  "matplotlib.*",
]
follow_imports = "skip"

